services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hospital-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: hospital_db
      POSTGRES_USER: hospital_user
      POSTGRES_PASSWORD: hospital_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hospital_user -d hospital_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: hospital-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: hospital
      RABBITMQ_DEFAULT_PASS: hospital123
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Management UI
    networks:
      - hospital-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3

  # Hospital Management Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: hospital-app
    restart: unless-stopped
    environment:
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/hospital_db
      SPRING_DATASOURCE_USERNAME: hospital_user
      SPRING_DATASOURCE_PASSWORD: hospital_pass
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_HIBERNATE_DDL_AUTO: create
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      
      # RabbitMQ Configuration
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: hospital
      SPRING_RABBITMQ_PASSWORD: hospital123
      SPRING_RABBITMQ_VIRTUAL_HOST: /
      
      # JWT Configuration
      JWT_SECRET: hospitalManagementSecretKeyForJWTTokenGeneration2024Docker
      JWT_EXPIRATION: 86400000
      
      # Server Configuration
      SERVER_PORT: 8080
      
      # Logging
      LOGGING_LEVEL_COM_FIAP_ATIVIDADE3: DEBUG
    ports:
      - "8080:8080"
    networks:
      - hospital-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs

  # Redis (opcional - para cache de sess√µes)
  redis:
    image: redis:7-alpine
    container_name: hospital-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  hospital-network:
    driver: bridge